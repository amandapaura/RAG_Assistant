#!/usr/bin/env python3
"""
Script de setup completo para o RAG Assistant
"""

import os
import sys
import subprocess
import time
from pathlib import Path
import requests
from dotenv import load_dotenv

def check_docker():
    """Verifica se Docker est√° dispon√≠vel"""
    try:
        subprocess.run(["docker", "--version"], check=True, capture_output=True)
        subprocess.run(["docker-compose", "--version"], check=True, capture_output=True)
        print("‚úÖ Docker e Docker Compose encontrados")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker ou Docker Compose n√£o encontrados")
        return False

def setup_environment():
    """Configura arquivo .env se n√£o existir"""
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if not env_file.exists() and env_example.exists():
        env_file.write_text(env_example.read_text())
        print("‚úÖ Arquivo .env criado a partir de .env.example")
    else:
        print("‚úÖ Arquivo .env j√° existe")

def wait_for_services():
    """Aguarda servi√ßos ficarem prontos"""
    services = {
        "Qdrant": "http://localhost:6333/health",
        "PostgreSQL": None  # Verificado via docker logs
    }
    
    print("‚è≥ Aguardando servi√ßos ficarem prontos...")
    
    # Verifica Qdrant
    for i in range(30):
        try:
            response = requests.get(services["Qdrant"], timeout=2)
            if response.status_code == 200:
                print("‚úÖ Qdrant est√° pronto")
                break
        except:
            pass
        
        if i == 29:
            print("‚ùå Timeout aguardando Qdrant")
            return False
        
        time.sleep(2)
    
    # Verifica PostgreSQL via logs
    result = subprocess.run(
        ["docker-compose", "logs", "postgres"], 
        capture_output=True, 
        text=True
    )
    
    if "database system is ready to accept connections" in result.stdout:
        print("‚úÖ PostgreSQL est√° pronto")
    else:
        print("‚ö†Ô∏è  PostgreSQL pode n√£o estar completamente pronto")
    
    return True

def setup_sample_data():
    """Configura dados de exemplo"""
    sample_data_dir = Path("data/documents")
    sample_data_dir.mkdir(parents=True, exist_ok=True)
    
    # Cria documento de exemplo
    sample_doc = sample_data_dir / "sample_knowledge.md"
    if not sample_doc.exists():
        sample_content = """# Base de Conhecimento - RAG Assistant

## O que √© RAG?
RAG (Retrieval-Augmented Generation) √© uma t√©cnica que combina busca de informa√ß√µes com gera√ß√£o de texto usando LLMs.

## Componentes do Sistema
- **Vector Database**: Qdrant para armazenamento de embeddings
- **LLM**: Modelos open source via Hugging Face
- **Agents**: Agentes especializados para diferentes tarefas
- **Workflow**: LangGraph para orquestra√ß√£o

## Funcionalidades
- Busca vetorial em documentos
- Busca na web em tempo real  
- Consultas meteorol√≥gicas
- Consultas SQL automatizadas
- Avalia√ß√£o de qualidade das respostas

## M√©tricas de Avalia√ß√£o
- Context Relevance: Relev√¢ncia do contexto recuperado
- Answer Relevance: Relev√¢ncia da resposta √† pergunta
- Groundedness: Fundamenta√ß√£o da resposta no contexto
- PII Detection: Detec√ß√£o de informa√ß√µes pessoais
- Jailbreak Detection: Detec√ß√£o de tentativas de bypass
"""
        sample_doc.write_text(sample_content)
        print("‚úÖ Documento de exemplo criado")

def run_ingestion():
    """Executa ingest√£o de documentos"""
    try:
        subprocess.run([
            "python", "scripts/ingest.py", "data/documents"
        ], check=True)
        print("‚úÖ Ingest√£o de documentos conclu√≠da")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro na ingest√£o de documentos")
        return False

def main():
    """Fun√ß√£o principal de setup"""
    print("üöÄ Iniciando setup do RAG Assistant...\n")
    
    # Verifica√ß√µes preliminares
    if not check_docker():
        sys.exit(1)
    
    # Setup do ambiente
    setup_environment()
    load_dotenv()
    
    # Cria dados de exemplo
    setup_sample_data()
    
    # Inicia servi√ßos
    print("üì¶ Iniciando servi√ßos com Docker Compose...")
    try:
        subprocess.run([
            "docker-compose", "up", "-d", "--build"
        ], check=True)
        print("‚úÖ Servi√ßos iniciados")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao iniciar servi√ßos")
        sys.exit(1)
    
    # Aguarda servi√ßos
    if not wait_for_services():
        sys.exit(1)
    
    # Executa ingest√£o
    time.sleep(5)  # Aguarda um pouco mais
    run_ingestion()
    
    print("\nüéâ Setup conclu√≠do com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("   1. Acesse: http://localhost:8501")
    print("   2. Teste algumas perguntas:")
    print("      - 'O que √© RAG?'")
    print("      - 'Como est√° o tempo em S√£o Paulo?'")
    print("      - 'Buscar not√≠cias sobre IA'")
    print("\nüîß Para desenvolvimento:")
    print("   - Logs: docker-compose logs -f app")
    print("   - Restart: docker-compose restart app")
    print("   - Stop: docker-compose down")

if __name__ == "__main__":
    main()